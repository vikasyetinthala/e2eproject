name: workflow 


on:
  push:
    branches:
      - main 
    path-ignore:
      - "README.md"

permissions:
  id-token: write 
  contents: read 

jobs:
  integrations: 
    name: Continous Integration 
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Lint code 
        run: echo "Linting respository"

      - name: Run unit tests
        run: echo "Running Unit Tests"
  
  build-and-push-ecr-image:
    name: Continous Delivery 
    needs: integrations 
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 

      - name: Install Utilities 
        run: |
          sudo apt-get update 
          sudo apt-get install -y jq unzip 

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:
          aws-secret-access-key:
          aws-region:

      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Build, tag. and push image to Amazon ECR 
        id: build-image 
        env:
          ECR_REGISTRY: 
          ECR_REPOSITORY:
          IMAGE_TAG:
        run:
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          

  Continuous-Deployment:
    needs: build-and-push-ecr-image 
    runs-on: self-hosted 
    steps:
      - name: Checkout 
        uses: actions/checkout@v3
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1 
        with:
          aws-access-key-id:
          aws-secret-access-key:
          aws-region:

      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
        run:
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITORY_NAME}}:latest 

      - name:  RUN Docker Image to serve users 
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=mltest -e "AWS_ACCESS_KEY_ID=${{secrets}}"

      - name: Clean previous images and containers 
        run:
         docker system prune -f 